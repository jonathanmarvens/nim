#!/usr/bin/env python

import sys
import os

APP_NAME = "nim"

HEADER_FILE, SOURCE_FILE = sys.argv[1:3]

CORE_TYPES = {
    'str':   {'ctype': 'NimRef*'},
    'int':   {'ctype': 'NimRef*'},
    'float': {'ctype': 'NimRef*'},
    'array': {'ctype': 'NimRef*'},
    'hash':  {'ctype': 'NimRef*'},
    'bool':  {'ctype': 'NimRef*'},

    'binop-type': {'ctype': 'NimBinopType'}
}

AST_DESCRIPTOR = [
    ['mod',
        ['root',
            ['name', 'str'],
            ['uses', 'array'],
            ['body', 'array']]],

    ['expr',
        ['binop',
            ['op', 'binop-type'],
            ['left', 'expr'],
            ['right', 'expr']],
        ['call',
            ['target', 'expr'],
            ['args', 'array']],
        ['getattr',
            ['target', 'expr'],
            ['attr', 'str']],
        ['getitem',
            ['target', 'expr'],
            ['key',  'expr']],
        ['array',
            ['value', 'array']],
        ['hash',
            ['value', 'hash']],
        ['str',
            ['value', 'str']],
        ['int',
            ['value', 'int']],
        ['float',
            ['value', 'float']],
        ['ident',
            ['id', 'str']],
        ['wildcard'],
        ['nil'],
        ['fn',
            ['args', 'array'],
            ['body', 'array']],
        ['bool', 
            ['value', 'bool']],
        ['not',
            ['value', 'expr']],
        ['spawn',
            ['target', 'expr'],
            ['args',   'array']]],
    ['stmt',
        ['expr',
            ['expr', 'expr']],
        ['if',
            ['expr', 'expr'],
            ['body', 'array'],
            ['orelse', 'array']],
        ['while',
            ['expr', 'expr'],
            ['body', 'array']],
        ['break'],
        ['ret',
            ['expr', 'expr']],
        ['match',
            ['expr', 'expr'],
            ['body',  'array']],
        ['pattern',
            ['test', 'expr'],
            ['body', 'array']],
        ['assign',
            ['target', 'expr'],
            ['value', 'expr']]],
    ['decl',
        ['func',
            ['name', 'str'],
            ['args', 'array'],
            ['body', 'array']],
        ['class',
            ['name', 'str'],
            ['base', 'array'],
            ['body', 'array']],
        ['var',
            ['name', 'str'],
            ['value', 'expr']],
        ['use',
            ['name', 'str']]]
]

class UnknownTypeError(Exception):
    pass

def ctype(name):
    try:
        t = CORE_TYPES[name]
        return t['ctype']
    except KeyError:
        ast_types = set([x[0] for x in AST_DESCRIPTOR])
        if name in ast_types:
            return 'NimRef*'
    raise UnknownTypeError(name)

def camelize(s):
    return "".join([x.title() for x in s.split("_")])

PARAMS = {
    "app_name": APP_NAME,
    "APP_NAME": APP_NAME.upper(),
    "AppName": camelize(APP_NAME)
}

OUTPUT_STREAM = None

def _(s="", params={}):
    print >>OUTPUT_STREAM, s % dict(PARAMS.items() + params.items())

def node_type_params(t):
    name = t[0]
    return {
        "node_type": name,
        "NODE_TYPE": name.upper(),
        "NodeType": camelize(name),
        "node_ctype": ctype(name)
    }

def kind_params(k):
    name = k[0]
    if name in ('if', 'int', 'float', 'while', 'break'):
        name += "_";
    return {
        "kind": name,
        "KIND": name.upper(),
        "Kind": camelize(name)
    }

def node_type_kinds(t):
    return t[1:]

def node_kind_attrs(k):
    return k[1:]

def attr_params(a):
    name = a[0]
    return {
        "attr": name,
        "ATTR": name.upper(),
        "Attr": camelize(name),
        "attr_ctype": ctype(a[1]),
        "is_gc_type": ctype(a[1]) == "NimRef*"
    }

def kind_ctor_args_params(k):
    params = []
    for a in node_kind_attrs(k):
        ap = attr_params(a)
        params.append("%(attr_ctype)s %(attr)s" % ap)
    params.append("const NimAstNodeLocation *location")
    return {"args": ", ".join(params)}

def set_output_stream(stream):
    global OUTPUT_STREAM
    OUTPUT_STREAM = stream

def merge(*args):
    s = dict(args[0])
    for arg in args[1:]:
        s.update(arg)
    return s

def header():
    with open(HEADER_FILE, "w+") as stream:
        set_output_stream(stream)
        _("#ifndef _%(APP_NAME)s_AST_H_INCLUDED_")
        _("#define _%(APP_NAME)s_AST_H_INCLUDED_")
        _()
        _("#include <stdint.h>")
        _()
        _("#include <nim/gc.h>")
        _("#include <nim/any.h>")
        _("#include <nim/code.h>")
        _()
        _("#ifdef __cplusplus")
        _("extern \"C\" {")
        _("#endif")
        _()
        _("typedef struct _%(AppName)sAstNodeLocation {", PARAMS)
        _("    NimRef *filename;")
        _("    int64_t   first_line;")
        _("    int64_t   last_line;")
        _("    int64_t   first_column;")
        _("    int64_t   last_column;")
        _("} %(AppName)sAstNodeLocation;", PARAMS)
        _()
        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            _("typedef enum _%(AppName)sAst%(NodeType)sType {", np)
            for k in node_type_kinds(t):
                kp = kind_params(k)
                _("    %(APP_NAME)s_AST_%(NODE_TYPE)s_%(KIND)s,", merge(np, kp))
            _("} %(AppName)sAst%(NodeType)sType;", np)
            _()
            _("typedef struct _%(AppName)sAst%(NodeType)s {", np)
            _("    %(AppName)sAny base;")
            _("    %(AppName)sAst%(NodeType)sType type;", np)
            _("    union {")
            for k in node_type_kinds(t):
                kp = kind_params(k)
                _("        struct {")
                for a in node_kind_attrs(k):
                    ap = attr_params(a)
                    _("            %(attr_ctype)s %(attr)s;", ap)
                _("        } %(kind)s;", kp)
            if np['node_type'] == 'expr':
                _("        struct {")
                _("            NimRef *target;")
                _("        } targetable;")
            _("    };")
            _("    %(AppName)sAstNodeLocation location;", np)
            _("} %(AppName)sAst%(NodeType)s;", np)
            _()

        _("#define NIM_AST_EXPR_TARGETABLE_INNER(ref, value) \\")
        _("    do { \\")
        _("        NimRef *r = (ref); \\")
        _("        while (NIM_AST_EXPR(r)->targetable.target) { \\")
        _("            r = NIM_AST_EXPR(r)->targetable.target; \\")
        _("        } \\")
        _("        NIM_AST_EXPR(r)->targetable.target = (value); \\")
        _("    } while (0)")
        _()
        _("nim_bool_t")
        _("%(app_name)s_ast_class_bootstrap(void);")
        _()

        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            #_("void")
            #_("%(app_name)s_ast_%(node_type)s_mark(%(node_ctype)s ref);", np)
            #_()
            for k in node_type_kinds(t):
                kp = kind_params(k)
                argp = kind_ctor_args_params(k)
                _("%(node_ctype)s", np)
                _("%(app_name)s_ast_%(node_type)s_new_%(kind)s(%(args)s);", merge(np, kp, argp))
                _()

        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            _("#define %(APP_NAME)s_AST_%(NODE_TYPE)s(ref) %(APP_NAME)s_CHECK_CAST(%(AppName)sAst%(NodeType)s, (ref), %(app_name)s_ast_%(node_type)s_class)", np)
            _("#define %(APP_NAME)s_AST_%(NODE_TYPE)s_TYPE(ref) (%(APP_NAME)s_AST_%(NODE_TYPE)s(ref)->type)", np)
            _("NIM_EXTERN_CLASS(ast_%(node_type)s);", np);
            _()

        _("#ifdef __cplusplus")
        _("};")
        _("#endif")
        _()
        _("#endif")

def source():
    with open(SOURCE_FILE, "w+") as stream:
        set_output_stream(stream)
        _("#include \"%(app_name)s/ast.h\"")
        _("#include \"%(app_name)s/str.h\"")
        _("#include \"%(app_name)s/class.h\"")
        _()
        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            # XXX class_ctype ?
            _("%(AppName)sRef *%(app_name)s_ast_%(node_type)s_class = NULL;", np)
        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            _("static void")
            _("_%(app_name)s_ast_%(node_type)s_mark(NimGC *gc, %(node_ctype)s ref);", np)
        _()
        _("nim_bool_t")
        _("%(app_name)s_ast_class_bootstrap(void)")
        _("{")
        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            _("    %(app_name)s_ast_%(node_type)s_class = nim_class_new (" +
                    "NIM_STR_NEW(\"%(node_type)s\"), NULL, sizeof(%(AppName)sAst%(NodeType)s));", np)
            _("    if (%(app_name)s_ast_%(node_type)s_class == NULL) {", np)
            _("        return %(APP_NAME)s_FALSE;")
            _("    }")
            _("    %(APP_NAME)s_CLASS(%(app_name)s_ast_%(node_type)s_class)->mark = _%(app_name)s_ast_%(node_type)s_mark;", np)
            _("    nim_gc_make_root (NULL, %(app_name)s_ast_%(node_type)s_class);", np)
            _()
        _("    return %(APP_NAME)s_TRUE;")
        _("}")
        _()
        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            _("static void")
            _("_%(app_name)s_ast_%(node_type)s_mark(NimGC *gc, %(node_ctype)s ref)", np)
            _("{")
            _("    %(APP_NAME)s_SUPER (ref)->mark (gc, ref);", np)
            _("    switch (%(APP_NAME)s_AST_%(NODE_TYPE)s(ref)->type) {", np)
            for k in node_type_kinds(t):
                kp = kind_params(k)
                _("        case %(APP_NAME)s_AST_%(NODE_TYPE)s_%(KIND)s:", merge(np, kp))
                for a in node_kind_attrs(k):
                    ap = attr_params(a)
                    if ap['is_gc_type']:
                        _("            nim_gc_mark_ref (NULL, %(APP_NAME)s_AST_%(NODE_TYPE)s(ref)->%(kind)s.%(attr)s);", merge(np, kp, ap))
                _("            break;") 
            _("        default:")
            _("            nim_bug (__FILE__, __LINE__, \"unknown AST type?\");")
            _("    };")
            _("}")
            _()
        for t in AST_DESCRIPTOR:
            np = node_type_params(t)
            for k in node_type_kinds(t):
                kp = kind_params(k)
                argp = kind_ctor_args_params(k)
                _("%(node_ctype)s", np)
                _("%(app_name)s_ast_%(node_type)s_new_%(kind)s(%(args)s)", merge(np, kp, argp))
                _("{")
                _("    %(node_ctype)s ref = %(app_name)s_gc_new_object (NULL);", np)
                _("    if (ref == NULL) {")
                _("        return NULL;")
                _("    }")
                _()
                _("    %(APP_NAME)s_ANY(ref)->klass = %(app_name)s_ast_%(node_type)s_class;", np)
                _("    memcpy (&%(APP_NAME)s_AST_%(NODE_TYPE)s(ref)->location, location, sizeof(*location));", np)
                _()
                _("    %(APP_NAME)s_AST_%(NODE_TYPE)s(ref)->type = %(APP_NAME)s_AST_%(NODE_TYPE)s_%(KIND)s;", merge(np, kp))
                _()
                for a in node_kind_attrs(k):
                    ap = attr_params(a)
                    _("    %(APP_NAME)s_AST_%(NODE_TYPE)s(ref)->%(kind)s.%(attr)s = %(attr)s;", merge(np, kp, ap))
                _()
                _("    return ref;")
                _("}")
                _()

header()
source()

